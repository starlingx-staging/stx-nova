From 57528e9161a2512fdad64c77268c5894d7279ed1 Mon Sep 17 00:00:00 2001
From: Steven Webster <swebster@windriver.com>
Date: Fri, 20 Nov 2015 14:43:12 -0500
Subject: [PATCH 065/143] US64378: Encryption accelleration: PCI device usage

A new REST API has been added to list PCI device usage across all compute
nodes.  The API is as follows:

/v2/{tenant_id}/wrs-pci

To exercise this API from the command line, the following can be used:

nova device-list
nova device-show

Includes following commits:
- Filter out non-crypto devices (commit af853d61)
- Device usage per device type (commit 4c74256d)
- Fix pep8 errors introduced in previous commit (commit
  ca9612fb)

(cherry picked from R3 commit 6390e57)

Notes on Newton rebase:

- Added policy file for wrs-pci and fixed related unit tests

6c32f0d Fix wrs_pci extension loading error
   Nova API was failing to load pci extension as it was
   accessing extensions.os_compute_soft_authorizer which was removed
   upstream in Newton.  This meant server group information was missing
   from nova show would throw an exception.

9f67ef4 PCI: Exception when running nova device-show command
   After the newton rebase, the NovaObjectDictCompat is no longer
   valid/used for the ComputeNode class.
   As such, we cannot reference node['host'] from the pci device API,
   and must use node.host instead.

f706f6a Use Nova PCI Alias for device usage
   With the introduction of GPU passthrough support, we now allow an
   arbitrary PCI device, defined by device_id, vendor_id, and name
   to be added to the PCI alias list.

   The trouble is that our extension to the Nova API showing the
   PCI device usage was based on a hardcoded 'known_pci_devices' list.

   This is no longer sufficient, as we need to display the PCI device
   usage for the user generated PCI aliases.

   This commit takes care of:

   - Eliminate custom Nova known_pci_devices option
   - Nova device API uses the PCI alias
   - Nova device API returns the class id of a device (makes a more
     consistent output)
   - Fix an issue with nova device-show when specifying device_id
   - Allow a user to specify the device_id or PCI alias name when
     listing or showing a device

3a0992a nova to make use of pci.alias instead of pci_alias

__TYPE_primary
__TAG_pci-sriov
__R4_commit_f87f8fb
__R3_commit_6390e57
__TC8543
---
 nova/api/openstack/compute/extension_info.py |   8 ++
 nova/api/openstack/compute/routes.py         |   9 ++
 nova/api/openstack/compute/wrs_pci.py        | 176 +++++++++++++++++++++++++++
 nova/policies/__init__.py                    |   2 +
 nova/policies/wrs_pci.py                     |  36 ++++++
 nova/tests/unit/test_policy.py               |   1 +
 6 files changed, 232 insertions(+)
 create mode 100644 nova/api/openstack/compute/wrs_pci.py
 create mode 100644 nova/policies/wrs_pci.py

diff --git a/nova/api/openstack/compute/extension_info.py b/nova/api/openstack/compute/extension_info.py
index ec9946d..a0db3dd 100644
--- a/nova/api/openstack/compute/extension_info.py
+++ b/nova/api/openstack/compute/extension_info.py
@@ -849,6 +849,14 @@ EXTENSION_LIST = [
         "updated": "2014-12-03T00:00:00Z"
     },
     {
+        "alias": "wrs-pci",
+        "description": "PCI support.",
+        "links": [],
+        "name": "WrsPci",
+        "namespace": "http://docs.openstack.org/compute/ext/fake_xml",
+        "updated": "2014-12-03T00:00:00Z"
+    },
+    {
         "alias": "wrs-providernet",
         "description": "Provider Network support.",
         "links": [],
diff --git a/nova/api/openstack/compute/routes.py b/nova/api/openstack/compute/routes.py
index 5e95794..9cb1928 100644
--- a/nova/api/openstack/compute/routes.py
+++ b/nova/api/openstack/compute/routes.py
@@ -93,6 +93,7 @@ from nova.api.openstack.compute import used_limits
 from nova.api.openstack.compute import versionsV21
 from nova.api.openstack.compute import virtual_interfaces
 from nova.api.openstack.compute import volumes
+from nova.api.openstack.compute import wrs_pci
 from nova.api.openstack.compute import wrs_providernets
 from nova.api.openstack.compute import wrs_server_groups
 from nova.api.openstack.compute import wrs_server_if
@@ -395,6 +396,8 @@ virtual_interfaces_controller = functools.partial(_create_controller,
 volumes_controller = functools.partial(_create_controller,
     volumes.VolumeController, [], [])
 
+wrs_pci_controller = functools.partial(_create_controller,
+    wrs_pci.WrsPciController, [], [])
 
 wrs_providernets_controller = functools.partial(_create_controller,
     wrs_providernets.WrsController, [], [])
@@ -885,6 +888,12 @@ ROUTE_LIST = (
         'PUT': [server_tags_controller, 'update'],
         'DELETE': [server_tags_controller, 'delete']
     }),
+    ('/wrs-pci', {
+        'GET': [wrs_pci_controller, 'index']
+    }),
+    ('/wrs-pci/{id}', {
+        'GET': [wrs_pci_controller, 'show']
+    }),
     ('/wrs-providernet/{id}', {
         'GET': [wrs_providernets_controller, 'show']
     }),
diff --git a/nova/api/openstack/compute/wrs_pci.py b/nova/api/openstack/compute/wrs_pci.py
new file mode 100644
index 0000000..35c556e
--- /dev/null
+++ b/nova/api/openstack/compute/wrs_pci.py
@@ -0,0 +1,176 @@
+#
+# Copyright (c) 2015 Wind River Systems, Inc.
+#
+#
+#
+#
+#
+
+"""The PCI Device Extension."""
+
+from nova.api.openstack import extensions
+from nova.api.openstack import wsgi
+from nova.conf import CONF
+from nova import objects
+from nova.pci import devspec
+from nova.pci import whitelist
+from nova.policies import wrs_pci as wrs_pci_policies
+
+from oslo_log import log as logging
+
+
+LOG = logging.getLogger(__name__)
+
+
+class WrsPciUsage(object):
+    def __init__(self, product_id, vendor_id):
+        '''Construct a WrsPciUsage object with the given values.'''
+        self.product_id = product_id
+        self.vendor_id = vendor_id
+        self.pci_pfs_configured = 0
+        self.pci_pfs_count = 0
+        self.pci_vfs_configured = 0
+        self.pci_vfs_count = 0
+
+    def get_device_usage_by_node(self, node):
+        if node.pci_device_pools and node.pci_device_pools.objects:
+            for pool in node.pci_device_pools.objects:
+                if (self.product_id != devspec.ANY and
+                    self.product_id != pool.product_id):
+                    continue
+                tags = pool.tags
+                dev_type = tags.get('dev_type', {})
+                configured = int(tags.get('configured', '0'))
+
+                if (self.product_id == pool.product_id and
+                    self.vendor_id == pool.vendor_id):
+                    if 'type-PCI' in dev_type:
+                        self.pci_pfs_configured += configured
+                        self.pci_pfs_count += pool.count
+
+                    if 'type-VF' in dev_type:
+                        self.pci_vfs_configured += configured
+                        self.pci_vfs_count += pool.count
+
+                    if not self.class_id:
+                        # Class id may not have been specified in the spec.
+                        # Fill it out here, which makes the replies / display
+                        # more consistent.
+                        self.class_id = pool.tags.get("class_id")
+
+
+class WrsPciController(wsgi.Controller):
+    def __init__(self):
+        super(WrsPciController, self).__init__()
+
+    @extensions.expected_errors(404)
+    def index(self, req):
+
+        """Returns list of devices.
+
+        The list is filtered by device id or alias if specified in the request,
+        else all devices are returned.
+        """
+
+        context = req.environ['nova.context']
+        context.can(wrs_pci_policies.BASE_POLICY_NAME)
+
+        nodes = objects.ComputeNodeList.get_all(context)
+
+        # The pci alias parameter has the same format as the PCI whitelist.
+        # Load the list of devices that are enabled for passthrough to a
+        # guest, and show resource usage for each.
+        pci_filter = whitelist.Whitelist(CONF.pci.alias)
+
+        device_usage = []
+        for spec in pci_filter.specs:
+            tags = spec.get_tags()
+            dev_name = tags.get('name')
+            device_id = spec.product_id
+
+            # Optional request to list by (PCI alias) name, or device id.
+            if 'device' in req.GET:
+                req_device = req.GET['device']
+                if req_device == dev_name or req_device == spec.product_id:
+                    device_id = spec.product_id
+                else:
+                    continue
+
+            class_id = tags.get("class_id", None)
+            usage = WrsPciUsage(device_id, spec.vendor_id, class_id)
+            for node in nodes:
+                usage.get_device_usage_by_node(node)
+
+            if (usage.pci_pfs_configured > 0 or
+                usage.pci_vfs_configured > 0):
+                device_usage.append({'device_name': str(dev_name),
+                    'device_id': usage.product_id,
+                    'vendor_id': usage.vendor_id,
+                    'class_id': usage.class_id,
+                    'pci_pfs_configured': usage.pci_pfs_configured,
+                    'pci_pfs_used':
+                        usage.pci_pfs_configured - usage.pci_pfs_count,
+                    'pci_vfs_configured': usage.pci_vfs_configured,
+                    'pci_vfs_used':
+                        usage.pci_vfs_configured - usage.pci_vfs_count})
+        return {'pci_device_usage': device_usage}
+
+    @extensions.expected_errors(404)
+    def show(self, req, id):
+
+        """Returns list of host usage for a particular device.
+
+        The list is filtered by host if specified in the request,
+        else all hosts are returned.
+
+        Note that the id parameter can be the PCI alias or PCI
+        device id.
+        """
+
+        context = req.environ['nova.context']
+        context.can(wrs_pci_policies.BASE_POLICY_NAME)
+        host = None
+
+        if 'host' in req.GET:
+            host = req.GET['host']
+        if host:
+            nodes = objects.ComputeNodeList.get_all_by_host(
+                           context, host)
+        else:
+            nodes = objects.ComputeNodeList.get_all(context)
+
+        # The pci alias parameter has the same format as the PCI whitelist.
+        # Load the list of devices that are enabled for passthrough to a
+        # guest, and show resource usage for each.
+        pci_filter = whitelist.Whitelist(CONF.pci.alias)
+
+        device_usage = []
+        for spec in pci_filter.specs:
+            tags = spec.get_tags()
+
+            # Devices can be shown by (PCI alias) name, or device id.
+            dev_name = tags.get('name')
+            if id == dev_name:
+                device_id = spec.product_id
+            else:
+                device_id = id
+
+            if device_id != spec.product_id:
+                continue
+
+            for node in nodes:
+                class_id = tags.get("class_id", None)
+                usage = WrsPciUsage(device_id, spec.vendor_id, class_id)
+                usage.get_device_usage_by_node(node)
+                device_usage.append({'device_name': str(dev_name),
+                    'device_id': usage.product_id,
+                    'vendor_id': usage.vendor_id,
+                    'class_id': usage.class_id,
+                    'host': node.host,
+                    'pci_pfs_configured': usage.pci_pfs_configured,
+                    'pci_pfs_used':
+                        usage.pci_pfs_configured - usage.pci_pfs_count,
+                    'pci_vfs_configured': usage.pci_vfs_configured,
+                    'pci_vfs_used':
+                        usage.pci_vfs_configured - usage.pci_vfs_count})
+        return {'pci_device_usage': device_usage}
diff --git a/nova/policies/__init__.py b/nova/policies/__init__.py
index 5c585da..52427e7 100644
--- a/nova/policies/__init__.py
+++ b/nova/policies/__init__.py
@@ -94,6 +94,7 @@ from nova.policies import used_limits
 from nova.policies import virtual_interfaces
 from nova.policies import volumes
 from nova.policies import volumes_attachments
+from nova.policies import wrs_pci
 from nova.policies import wrs_providernets
 from nova.policies import wrs_server_groups
 from nova.policies import wrs_server_if
@@ -176,6 +177,7 @@ def list_rules():
         virtual_interfaces.list_rules(),
         volumes.list_rules(),
         volumes_attachments.list_rules(),
+        wrs_pci.list_rules(),
         wrs_providernets.list_rules(),
         wrs_server_if.list_rules(),
         wrs_server_groups.list_rules(),
diff --git a/nova/policies/wrs_pci.py b/nova/policies/wrs_pci.py
new file mode 100644
index 0000000..bea6a94
--- /dev/null
+++ b/nova/policies/wrs_pci.py
@@ -0,0 +1,36 @@
+#
+# Copyright (c) 2017 Wind River Systems, Inc.
+#
+#
+#
+#
+#
+
+from oslo_policy import policy
+
+from nova.policies import base
+
+
+BASE_POLICY_NAME = 'os_compute_api:wrs-pci'
+
+
+wrs_pci_policies = [
+    policy.DocumentedRuleDefault(
+        BASE_POLICY_NAME,
+        base.RULE_ADMIN_OR_OWNER,
+        """List and show PCI device usage.""",
+        [
+            {
+                'method': 'GET',
+                'path': '/wrs-pci'
+            },
+            {
+                'method': 'GET',
+                'path': '/wrs-pci/{id}'
+            },
+        ]),
+]
+
+
+def list_rules():
+    return wrs_pci_policies
diff --git a/nova/tests/unit/test_policy.py b/nova/tests/unit/test_policy.py
index 4516178..e21eaeb 100644
--- a/nova/tests/unit/test_policy.py
+++ b/nova/tests/unit/test_policy.py
@@ -457,6 +457,7 @@ class RealRolePolicyTestCase(test.NoDBTestCase):
 "os_compute_api:wrs-sg",
 "os_compute_api:wrs-res",
 "os_compute_api:wrs-providernet",
+"os_compute_api:wrs-pci",
 )
 
         self.non_admin_only_rules = (
-- 
2.7.4

