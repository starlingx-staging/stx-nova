From cb179e2cf7ccd75eb868a7831f376d346b24f84d Mon Sep 17 00:00:00 2001
From: Chris Friesen <chris.friesen@windriver.com>
Date: Fri, 26 Feb 2016 12:24:21 -0600
Subject: [PATCH] Use thin provisioning for LVM instance backing

When using LVM-backed instances it's painful to have to zero out
a many-GB rootfs after deleting the image.  (And with the deadline
IO scheduler it can have a serious impact on VM IO performance.)

As a workaround, let's enable support for thinly-provisioned LVM.
This will have a (generally small) performance penalty but will
dramatically increase the volume deletion speed as well as the
volume duplication speed.

We add a "thin_logical_volumes" option which controls whether thin
volumes will be used.  If so, the "thinpool_suffix" option determines
the name of the thin pool given the name of the volume group.  At
nova-compute startup if the thin pool doesn't exist we create it.  We
do like cinder and use 95% of the free space when making the thin pool.

When "thin_logical_volumes" is True, we will report the usage of the
thin pool rather than the volume group. Like cinder, enabling thin
volumes will cause the volume_clear config option to be ignored.

This is a combination of a number of kilo commits:
b7b8030	Use thin provisioning for LVM instance backing
f701226	turn thin provisioning off till we fix sysinv
1c23163	enable thin provisioning by default

Change-Id: Ie460e4bc334f744bf3116ed0534ebe06c0dff16e
---
 nova/tests/unit/virt/libvirt/fake_imagebackend.py |   7 +
 nova/tests/unit/virt/libvirt/storage/test_lvm.py  |  10 ++
 nova/virt/libvirt/driver.py                       |   8 +-
 nova/virt/libvirt/imagebackend.py                 |   7 +
 nova/virt/libvirt/storage/lvm.py                  | 157 ++++++++++++++++++++--
 5 files changed, 172 insertions(+), 17 deletions(-)

diff --git a/nova/tests/unit/virt/libvirt/fake_imagebackend.py b/nova/tests/unit/virt/libvirt/fake_imagebackend.py
index 32aa901..911accf 100644
--- a/nova/tests/unit/virt/libvirt/fake_imagebackend.py
+++ b/nova/tests/unit/virt/libvirt/fake_imagebackend.py
@@ -23,6 +23,13 @@ class Backend(object):
     def __init__(self, use_cow):
         pass
 
+    def backend(self):
+        class FakeImage(imagebackend.Image):
+            def create_image(self, prepare_template, base,
+                              size, *args, **kwargs):
+                pass
+        return FakeImage
+
     def image(self, instance, name, image_type=''):
         class FakeImage(imagebackend.Image):
             def __init__(self, instance, name):
diff --git a/nova/tests/unit/virt/libvirt/storage/test_lvm.py b/nova/tests/unit/virt/libvirt/storage/test_lvm.py
index 0480b6c..4bfa4ee 100644
--- a/nova/tests/unit/virt/libvirt/storage/test_lvm.py
+++ b/nova/tests/unit/virt/libvirt/storage/test_lvm.py
@@ -75,6 +75,16 @@ class LvmTestCase(test.NoDBTestCase):
         self.stubs.Set(lvm, 'get_volume_size', fake_lvm_size)
         self.stubs.Set(utils, 'execute', fake_execute)
 
+        # One test for thin volumes
+        CONF.set_override('thin_logical_volumes', True, 'libvirt')
+        executes = []
+        expected_commands = []
+        lvm.clear_volume('/dev/v1')
+        self.assertEqual(expected_commands, executes)
+
+        # Explicitly set fat volumes for the rest of the tests.
+        CONF.set_override('thin_logical_volumes', False, 'libvirt')
+
         # Test the correct dd commands are run for various sizes
         lvm_size = 1
         executes = []
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 152cf7a..6a1064a 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -742,6 +742,7 @@ class LibvirtDriver(driver.ComputeDriver):
 
     def init_host(self, host):
         self._host.initialize()
+        self.image_backend.backend().init_host()
 
         self._do_quality_warnings()
 
@@ -7738,17 +7739,12 @@ class LibvirtDriver(driver.ComputeDriver):
             # extensions). They currently get regenerated regardless
             # of resizing.
             if not ext:
-                # Create a new empty volume of the same size which we
+                # Make a duplicate volume of the same size which we
                 # will use for resizing. This preserves the original
                 # for reverting if resize fails
                 lvm.create_duplicate_volume(
                     info['path'] + "_resize",
                     info['path'])
-
-                # copy the preserved volume contents to the new
-                # volume which will be resized
-                libvirt_utils.copy_image(info['path'] + "_resize",
-                                         info['path'])
                 if size:
                     lvm.resize_volume(info['path'], size)
         except exception.ResizeError as e:
diff --git a/nova/virt/libvirt/imagebackend.py b/nova/virt/libvirt/imagebackend.py
index b5ca2ae..5187b9f 100644
--- a/nova/virt/libvirt/imagebackend.py
+++ b/nova/virt/libvirt/imagebackend.py
@@ -465,6 +465,9 @@ class Image(object):
 
         :param name: name of the snapshot
         """
+
+    @staticmethod
+    def init_host():
         pass
 
 
@@ -781,6 +784,10 @@ class Lvm(Image):
     def get_model(self, connection):
         return imgmodel.LocalBlockImage(self.path)
 
+    @staticmethod
+    def init_host():
+        lvm.create_thinpool_if_needed(CONF.libvirt.images_volume_group)
+
 
 class Rbd(Image):
 
diff --git a/nova/virt/libvirt/storage/lvm.py b/nova/virt/libvirt/storage/lvm.py
index df9b30f..82bdd9b 100644
--- a/nova/virt/libvirt/storage/lvm.py
+++ b/nova/virt/libvirt/storage/lvm.py
@@ -19,6 +19,7 @@
 #    under the License.
 #
 
+import os.path
 from oslo_concurrency import processutils
 from oslo_config import cfg
 from oslo_log import log as logging
@@ -39,6 +40,14 @@ lvm_opts = [
     cfg.IntOpt('volume_clear_size',
                default=0,
                help='Size in MiB to wipe at start of old volumes. 0 => all'),
+    cfg.BoolOpt('thin_logical_volumes',
+                default=True,
+                help='Create thin logical volumes if this flag is set to '
+                     'True.  This will also skip zeroing/shredding the'
+                     'volume regardless of the volume_clear setting.'),
+    cfg.StrOpt('thinpool_suffix',
+               default='-pool',
+               help='The suffix to generate the thinpool name from the VG'),
 ]
 
 CONF = cfg.CONF
@@ -47,17 +56,80 @@ CONF.import_opt('instances_path', 'nova.compute.manager')
 LOG = logging.getLogger(__name__)
 
 
+def create_thinpool_if_needed(vg):
+    if CONF.libvirt.thin_logical_volumes is False:
+        return
+
+    poolname = vg + CONF.libvirt.thinpool_suffix
+    # Do we need to worry about resizing the VG and thinpool?
+    if poolname in list_volumes(vg):
+        return
+    # Create thinpool.  Leave 5% of free space for metadata.
+    size = _get_volume_group_info(vg)['free'] * 0.95
+    # Round down to the nearest GiB like cinder.  This also means we don't
+    # need to worry about being a multiple of the chunk size.
+    size = int(size) >> 30 << 30
+    create_volume(vg, poolname, size)
+
+
+def thin_copy_volume(lv_src, lv_dest, vg, size):
+    """Copies a thin-provisioned volume.
+
+    Because we know we're dealing with thin-provisioned volumes, we can just
+    do a snapshot.  (As long as there's enough free space.)
+
+    :param lv_src: source thin volume
+    :param lv_dest: dest thin volume
+    :param vg: volume group
+    :param size: size of the volume being copied
+
+    This duplicates some code from create_duplicate_volume() and from
+    create_volume(), the alternative would be to mangle create_volume() to
+    also handle snapshots and then tweak a bunch of unit tests.
+    """
+    thinpool = vg + CONF.libvirt.thinpool_suffix
+    vg_info = _get_thinpool_info(vg, thinpool)
+    free_space = vg_info['free']
+    if size > free_space:
+        raise RuntimeError(_('Insufficient Space on Volume Group %(vg)s.'
+                             ' Only %(free_space)db available,'
+                             ' but %(size)db required'
+                             ' by thin volume %(lv)s.') %
+                           {'vg': vg,
+                            'free_space': free_space,
+                            'size': size,
+                            'lv': lv_dest})
+    cmd = ('lvcreate', '-s', '-n', lv_dest, '%s/%s' % (vg, lv_src))
+    utils.execute(*cmd, run_as_root=True, attempts=3)
+
+
 def create_volume(vg, lv, size, sparse=False):
     """Create LVM image.
 
     Creates a LVM image with given size.
 
     :param vg: existing volume group which should hold this image
-    :param lv: name for this image (logical volume)
+    :param lv: name for this volume (logical volume)
     :size: size of image in bytes
     :sparse: create sparse logical volume
     """
-    vg_info = get_volume_group_info(vg)
+
+    # Figure out thinpool name and type of volume to create.
+    thinpool = vg + CONF.libvirt.thinpool_suffix
+    if CONF.libvirt.thin_logical_volumes:
+        if lv == thinpool:
+            vtype = 'thinpool'
+        else:
+            vtype = 'thin'
+    else:
+        vtype = 'default'
+
+    # Can't call get_volume_group_info() because we want to do special
+    # handling when creating the thinpool itself.
+    if vtype == 'thin':
+        vg_info = _get_thinpool_info(vg, thinpool)
+    else:
+        vg_info = _get_volume_group_info(vg)
     free_space = vg_info['free']
 
     def check_size(vg, lv, size):
@@ -89,11 +161,49 @@ def create_volume(vg, lv, size, sparse=False):
                 '--virtualsize', '%db' % size, '-n', lv, vg)
     else:
         check_size(vg, lv, size)
-        cmd = ('lvcreate', '-L', '%db' % size, '-n', lv, vg)
+        if vtype == 'default':
+            cmd = ('lvcreate', '-L', '%db' % size, '-n', lv, vg)
+        elif vtype == 'thinpool':
+            cmd = ('lvcreate', '-L', '%db' % size, '-T', '%s/%s' % (vg, lv))
+        elif vtype == 'thin':
+            cmd = ('lvcreate', '-V', '%db' % size, '-T',
+                   '%s/%s' % (vg, thinpool), '-n', lv)
+
     utils.execute(*cmd, run_as_root=True, attempts=3)
 
 
-def get_volume_group_info(vg):
+def _get_thinpool_info(vg, thinpool):
+    """Return free/used/total space info for a thinpool in the specified vg
+
+    :param vg: volume group name
+    :param thinpool: thin pool name
+    :returns: A dict containing:
+             :total: How big the filesystem is (in bytes)
+             :free: How much space is free (in bytes)
+             :used: How much space is used (in bytes)
+    """
+    thinpool_used = 0
+    thinpool_size = 0
+    out, err = utils.execute('vgs', '--noheadings', '--nosuffix',
+                       '--separator', '|',
+                       '--units', 'b', '-o', 'lv_name,lv_size,pool_lv', vg,
+                       run_as_root=True)
+    for line in out.splitlines():
+        lvinfo = line.split('|')
+        lv_name = lvinfo[0].strip()
+        lv_size = int(lvinfo[1])
+        lv_pool = lvinfo[2]
+        if lv_name == thinpool:
+            thinpool_size = lv_size
+        elif lv_pool == thinpool:
+            # Account for total size of all volumes in the thin pool.
+            thinpool_used += lv_size
+    return {'total': thinpool_size,
+            'free': thinpool_size - thinpool_used,
+            'used': thinpool_used}
+
+
+def _get_volume_group_info(vg):
     """Return free/used/total space info for a volume group in bytes
 
     :param vg: volume group name
@@ -117,6 +227,19 @@ def get_volume_group_info(vg):
             'used': int(info[0]) - int(info[1])}
 
 
+def get_volume_group_info(vg):
+    """Return free/used/total space info in bytes
+
+    If thin provisioning is enabled then return data for the thin pool,
+    otherwise return data for the volume group.
+    """
+    if CONF.libvirt.thin_logical_volumes:
+        thinpool = vg + CONF.libvirt.thinpool_suffix
+        return _get_thinpool_info(vg, thinpool)
+    else:
+        return _get_volume_group_info(vg)
+
+
 def list_volumes(vg):
     """List logical volumes paths for given volume group.
 
@@ -213,6 +336,10 @@ def clear_volume(path):
 
     :param path: logical volume path
     """
+    # If using thin volumes it doesn't make sense to clear them.
+    if CONF.libvirt.thin_logical_volumes:
+        return
+
     volume_clear = CONF.libvirt.volume_clear
 
     if volume_clear == 'none':
@@ -286,20 +413,28 @@ def rename_volume(lv_name, lv_new_name):
 
 
 def create_duplicate_volume(lv_name, lv_new_name):
-    """Creates an LVM volume that is the same size as a reference LVM
-    disk image.
+    """Duplicate a reference logical volume.
 
-    Creates an LVM image using the same size as a reference volume. This
-    does not copy the
+    Creates an LVM volume the same size as a reference volume and with the
+    same contents.
 
-    :param lv_name: name of the reference image (logical volume)
-    :param lv_new_name: name for the new logical volume
+    :param lv_name: path of the reference image (logical volume)
+    :param lv_new_name: path for the new logical volume
     """
     vg = get_volume_vg(lv_name)
     size = get_volume_size(lv_name)
     errors = []
     try:
-        create_volume(vg, lv_new_name, size, sparse=False)
+        if CONF.libvirt.thin_logical_volumes:
+            # Special-case for thin volumes
+            name = os.path.basename(lv_name)
+            new_name = os.path.basename(lv_new_name)
+            thin_copy_volume(name, new_name, vg, size)
+        else:
+            create_volume(vg, lv_new_name, size, sparse=False)
+
+            # copy the preserved volume contents to the new volume
+            utils.copy_image(lv_name, lv_new_name)
     except processutils.ProcessExecutionError as exp:
         errors.append(six.text_type(exp))
         if errors:
-- 
2.7.4

