From caa8f203182feb77cf414c5888580a0068431403 Mon Sep 17 00:00:00 2001
From: Daniel Chavolla <daniel.chavolla@windriver.com>
Date: Sun, 28 Jan 2018 09:50:40 -0500
Subject: [PATCH 088/143] avoid double disk checking on pre-check
 live-migrate

Previous to our Pike rebase, in the resource tracker, the updates to the
compute_node due to a claim  were not  saved into the database. Now in Pike
there is a compute_node.save() call in ReosurceTracker._update(), which is
called at the end of each claim.

This means that on a live-migrate, the compute_node gotten by
check_can_live_migrate_destination() has already the resources adjusted by
the move_claim. This also means that the check for available disk space
(disk_available_least when block migrating) done in the driver's
_assert_dest_node_has_enough_disk() is comparing against an already
adjusted value.

Note that the scheduler already checked for enough free
disk in the destination node using the original disk_available_least value.

__TYPE_single
---
 nova/tests/unit/virt/libvirt/test_driver.py | 21 ---------------------
 nova/virt/libvirt/driver.py                 | 14 +++++++++-----
 2 files changed, 9 insertions(+), 26 deletions(-)

diff --git a/nova/tests/unit/virt/libvirt/test_driver.py b/nova/tests/unit/virt/libvirt/test_driver.py
index 1d8ed20..cb33641 100755
--- a/nova/tests/unit/virt/libvirt/test_driver.py
+++ b/nova/tests/unit/virt/libvirt/test_driver.py
@@ -7801,11 +7801,6 @@ class LibvirtConnTestCase(test.NoDBTestCase,
         instance, dest_check_data, drvr = self._mock_can_live_migrate_source(
                 block_migration=True)
 
-        self.mox.StubOutWithMock(drvr, "_assert_dest_node_has_enough_disk")
-        drvr._assert_dest_node_has_enough_disk(
-            self.context, instance, dest_check_data.disk_available_mb,
-            False, None)
-
         self.mox.ReplayAll()
         ret = drvr.check_can_live_migrate_source(self.context, instance,
                                                  dest_check_data)
@@ -7865,22 +7860,6 @@ class LibvirtConnTestCase(test.NoDBTestCase,
                           drvr.check_can_live_migrate_source,
                           self.context, instance, dest_check_data)
 
-    @mock.patch('nova.virt.libvirt.driver.LibvirtDriver.'
-                '_get_instance_disk_info')
-    def test_check_can_live_migrate_source_with_dest_not_enough_disk(
-            self, mock_get_bdi):
-        mock_get_bdi.return_value = [{"virt_disk_size": 2}]
-
-        instance, dest_check_data, drvr = self._mock_can_live_migrate_source(
-                block_migration=True,
-                disk_available_mb=0)
-        self.mox.ReplayAll()
-
-        self.assertRaises(exception.MigrationError,
-                          drvr.check_can_live_migrate_source,
-                          self.context, instance, dest_check_data)
-        mock_get_bdi.assert_called_once_with(instance, None)
-
     @mock.patch.object(host.Host, 'has_min_version', return_value=False)
     @mock.patch('nova.virt.libvirt.driver.LibvirtDriver.'
                 '_assert_dest_node_has_enough_disk')
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index a7644a2..d5fa2e8 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -6732,11 +6732,15 @@ class LibvirtDriver(driver.ComputeDriver):
                 reason = _("Block migration can not be used "
                            "with shared storage.")
                 raise exception.InvalidLocalStorage(reason=reason, path=source)
-            if 'disk_over_commit' in dest_check_data:
-                self._assert_dest_node_has_enough_disk(context, instance,
-                                        dest_check_data.disk_available_mb,
-                                        dest_check_data.disk_over_commit,
-                                        block_device_info)
+            # check for disk space has already been done by the scheduler,
+            # plus dest_check_data already contains adjusted values. Therefore
+            # we skip this call to _assert_dest_node_has_enough_disk
+            #
+            # if 'disk_over_commit' in dest_check_data:
+            #    self._assert_dest_node_has_enough_disk(context, instance,
+            #                            dest_check_data.disk_available_mb,
+            #                            dest_check_data.disk_over_commit,
+            #                            block_device_info)
             if block_device_info:
                 bdm = block_device_info.get('block_device_mapping')
                 # NOTE(pkoniszewski): libvirt from version 1.2.17 upwards
-- 
2.7.4

