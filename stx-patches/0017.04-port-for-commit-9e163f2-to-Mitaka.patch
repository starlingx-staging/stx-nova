From f0e483dd04d9cc379db9ef0cf18b0e2ed3529759 Mon Sep 17 00:00:00 2001
From: Daniel Chavolla <daniel.chavolla@windriver.com>
Date: Fri, 12 Aug 2016 15:21:51 -0400
Subject: [PATCH] port for commit 9e163f2 to Mitaka:

Instance(s) scheduled unexpectedly on compute-0 even though active
Platform Memory Usage alarm on that compute.
This issue is because memory usage accounting algorithm between RMON and the
Platform Monitor are not the same.
Platform Monitor algorithm is being ported to RMON. The difference is mainly
from the TotalMemory calculations.
The new calculation is:

Avail = sum of (MemFree +  FilePages + Sreclaimable)  taken from
/proc/meminfo
Anon_mem = Active(anon) + Inactive(anon) taken from /proc/meminfo
memTotal = Avail + Anon_mem
mem_usage = anon / memTotal
---
 nova/compute/monitors/platform/platform_monitor.py | 51 +++-------------------
 1 file changed, 7 insertions(+), 44 deletions(-)

diff --git a/nova/compute/monitors/platform/platform_monitor.py b/nova/compute/monitors/platform/platform_monitor.py
index 78cc54a..9c96a73 100644
--- a/nova/compute/monitors/platform/platform_monitor.py
+++ b/nova/compute/monitors/platform/platform_monitor.py
@@ -18,7 +18,6 @@ Platform monitor to retrieve platform CPU and MEM utilization
 """
 
 import copy
-import os
 import re
 
 from oslo_log import log as logging
@@ -131,51 +130,15 @@ class PlatformMonitor(base.MonitorBase):
         Buffers = int(m[m.index('Buffers:') + 1])
         Cached = int(m[m.index('Cached:') + 1])
         SReclaimable = int(m[m.index('SReclaimable:') + 1])
-        path = "/sys/devices/system/node/"
-
-        dir = os.listdir(path)
-        for file_name in dir:
-            # look for /sys/devices/system/node/node() dirs
-            if 'node' in file_name:
-                # look into /sys/devices/system/node/node()/meminfo
-                # to compute available 4K memory from MemFree, FilePages,
-                # and SReclaimable
-                f_minfo = "%s/%s/meminfo" % (path, file_name)
-                try:
-                    with open(f_minfo) as fm:
-                        lines = fm.readlines()
-                        for line in lines:
-                            match_list = ["MemFree:", "FilePages:",
-                                          "SReclaimable:"]
-                            if any(x in line for x in match_list):
-                                sp = line.split()
-                                avail += int(sp[3])
-                except IOError:
-                    avail = 0
-
-        # now calculate PSS from /proc/*/smaps
-        path = '/proc'
-        dirs = [os.path.join(path, d) for d in os.listdir(path) if
-                os.path.isdir(os.path.join(path, d))]
-        pss_sum = 0
-        for dir in dirs:
-            file = dir + '/smaps'
-            if os.path.exists(file):
-                try:
-                    with open(file) as fd:
-                        for line in fd.readlines():
-                            if line.startswith("Pss"):
-                                sp = line.split()
-                                pss_sum += int(sp[1])
-                except IOError:
-                    pass
+        Active_anon = int(m[m.index('Active(anon):') + 1])
+        Inactive_anon = int(m[m.index('Inactive(anon):') + 1])
 
         # mem_total is the total mem available to the platform.
-        # since we excluded huge pages, it is avail + pss
-        mem_total = avail + pss_sum
-
-        mem_usage = 100.0 * float(mem_total - MemFree - Buffers - Cached -
-                                  SReclaimable) / float(mem_total)
+        # since we excluded huge pages, it is avail + anonamous memory
+        avail = MemFree + Buffers + Cached + SReclaimable
+        anon = Active_anon + Inactive_anon
+        mem_total = avail + anon
+        mem_usage = 100.0 * float(anon) / float(mem_total)
         self._data[fields.MonitorMetricType.PLATFORM_MEM_PERCENT] = mem_usage
         LOG.debug("Average Platform Memory Usage: %.2f%%" % mem_usage)
 
-- 
2.7.4

