From 41117342cc62226703f4333a445d90d449cbb8e6 Mon Sep 17 00:00:00 2001
From: Francois Palin <francois.palin@windriver.com>
Date: Thu, 15 Mar 2018 10:49:19 -0400
Subject: [PATCH 129/143] Do not query pci net info for QAT devices

QAT devices do not have a "net" subdir under
/sys/bus/pci/devices/<pci address>/, only NIC devices do.
This fix prevents trying to access this subdir for QAT devices,
therefore stopping the flow of "No net device was found for VF"
messages in nova compute logs.

(cherry picked from commit 75a296abf1d09a0329232b6b240b6183ebb13e67)
---
 nova/virt/libvirt/driver.py | 17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)

diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index 1942221..7e8e469 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -6133,18 +6133,23 @@ class LibvirtDriver(driver.ComputeDriver):
 
             return {'dev_type': fields.PciDeviceType.STANDARD}
 
-        def _get_device_capabilities(device, address):
+        def _get_device_capabilities(cfgdev, device, address):
             """Get PCI VF device's additional capabilities.
 
             If a PCI device is a virtual function, this function reads the PCI
             parent's network capabilities (must be always a NIC device) and
             appends this information to the device's dictionary.
             """
+            exclude_capabilities = ["QAT"]
+
             if device.get('dev_type') == fields.PciDeviceType.SRIOV_VF:
-                pcinet_info = self._get_pcinet_info(address)
-                if pcinet_info:
-                    return {'capabilities':
-                                {'network': pcinet_info.get('capabilities')}}
+                # exclude QAT devices
+                if not any(item in cfgdev.pci_capability.product
+                               for item in exclude_capabilities):
+                    pcinet_info = self._get_pcinet_info(address)
+                    if pcinet_info:
+                        return {'capabilities':
+                                  {'network': pcinet_info.get('capabilities')}}
             return {}
 
         virtdev = self._host.device_lookup_by_name(devname)
@@ -6170,7 +6175,7 @@ class LibvirtDriver(driver.ComputeDriver):
         # requirement by DataBase Model
         device['label'] = 'label_%(vendor_id)s_%(product_id)s' % device
         device.update(_get_device_type(cfgdev, address))
-        device.update(_get_device_capabilities(device, address))
+        device.update(_get_device_capabilities(cfgdev, device, address))
         return device
 
     def _get_pci_passthrough_devices(self):
-- 
2.7.4

