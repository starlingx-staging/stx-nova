From 12e31da1bfbfe224f8e321caced76f78cacba69e Mon Sep 17 00:00:00 2001
From: Gerry Kopec <Gerry.Kopec@windriver.com>
Date: Thu, 16 Jun 2016 19:36:02 -0400
Subject: [PATCH] optimize image download to avoid stalling other tasks

Under heavy disk IO load in Nokia testing, seeing significant delays
in nova-compute activities on compute node (e.g. observe that regular
audit doesn't run for minutes).

Reduce scenarios where main nova-compute process thread could get
stuck on disk IO task by offloading image download work to another
thread in eventlet pool.

This ports commits to mitaka:
bdd7d0f add sleep to avoid delays in periodic tasks
0f44c44 creating and deleting 10 stacks from heat template failed

(cherry picked from commit c97f53c)
---
 nova/image/glance.py | 56 +++++++++++++++++++++++++++++++++-------------------
 1 file changed, 36 insertions(+), 20 deletions(-)

diff --git a/nova/image/glance.py b/nova/image/glance.py
index 0a6ae5a..d28c6cb 100644
--- a/nova/image/glance.py
+++ b/nova/image/glance.py
@@ -12,6 +12,13 @@
 #    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 #    License for the specific language governing permissions and limitations
 #    under the License.
+#
+# Copyright (c) 2016-2017 Wind River Systems, Inc.
+#
+#
+#
+#
+#
 
 """Implementation of an image service that uses Glance as the backend."""
 
@@ -26,6 +33,7 @@ import time
 
 import cryptography
 from eventlet import greenthread
+from eventlet import tpool
 import glanceclient
 import glanceclient.exc
 from glanceclient.v2 import schemas
@@ -360,27 +368,35 @@ class GlanceImageService(object):
                                       'for image: %s'), image_id)
             return image_chunks
         else:
-            try:
-                for chunk in image_chunks:
+            # offload image download to another thread to reduce chances
+            #      of nova-compute getting stuck on disk IO
+            def write_image(data, image_chunks, close_file, verifier):
+                try:
+                    for chunk in image_chunks:
+                        if verifier:
+                            verifier.update(chunk)
+                        data.write(chunk)
+                        # Without this periodic tasks get delayed
+                        time.sleep(0)
                     if verifier:
-                        verifier.update(chunk)
-                    data.write(chunk)
-                if verifier:
-                    verifier.verify()
-                    LOG.info(_LI('Image signature verification succeeded '
-                                 'for image %s'), image_id)
-            except cryptography.exceptions.InvalidSignature:
-                data.truncate(0)
-                with excutils.save_and_reraise_exception():
-                    LOG.error(_LE('Image signature verification failed '
-                                  'for image: %s'), image_id)
-            except Exception as ex:
-                with excutils.save_and_reraise_exception():
-                    LOG.error(_LE("Error writing to %(path)s: %(exception)s"),
-                              {'path': dst_path, 'exception': ex})
-            finally:
-                if close_file:
-                    data.close()
+                        verifier.verify()
+                        LOG.info(_LI('Image signature verification succeeded '
+                                     'for image %s'), image_id)
+                except cryptography.exceptions.InvalidSignature:
+                    data.truncate(0)
+                    with excutils.save_and_reraise_exception():
+                        LOG.error(_LE('Image signature verification failed '
+                                      'for image: %s'), image_id)
+                except Exception as ex:
+                    with excutils.save_and_reraise_exception():
+                        LOG.error(_LE("Error writing to %(path)s: "
+                                      "%(exception)s"),
+                                  {'path': dst_path, 'exception': ex})
+                finally:
+                    if close_file:
+                        data.close()
+            tpool.execute(write_image, data, image_chunks, close_file,
+                          verifier)
 
     def create(self, context, image_meta, data=None):
         """Store the image data and return the new image object."""
-- 
2.7.4

