From 1812e66bf5e6143be378fe4aaf3bf62aba027ebe Mon Sep 17 00:00:00 2001
From: Francois Palin <francois.palin@windriver.com>
Date: Mon, 5 Mar 2018 19:35:55 -0500
Subject: [PATCH 118/143] augment member hosts list for instances
 with more recent id's

When multiple instances with anti-affinity are booted at the same time in
separate commands, they sometimes end up on the same host.

The code in get_older_member_hosts provide a check to verify, for an
instance, if there are other members from the same anti-affinity
server group running on the current host. That mechanism checks
for "older" instances, with database id's that are older that instance's
own id. This provides a way to "debounce" the case of 2 instances that
execute this check at the same time.

The issue occurs when instances with more recent id's are running on same
host, and are ignored.

This fix includes hosts for instances with more recent id's, but only
if their state shows they are not in their initial phase. This guarantees
that these instances have already run their check, and won't attempt to
leave the current host (i.e. debouncing is preserved).
---
 nova/objects/instance_group.py                 | 14 ++++----
 nova/tests/unit/objects/test_instance_group.py | 48 ++++++++++++++++++++++----
 2 files changed, 50 insertions(+), 12 deletions(-)

diff --git a/nova/objects/instance_group.py b/nova/objects/instance_group.py
index a92ecc7..b6c44e5 100644
--- a/nova/objects/instance_group.py
+++ b/nova/objects/instance_group.py
@@ -555,9 +555,10 @@ class InstanceGroup(base.NovaPersistentObject, base.NovaObject,
         """Get a list of hosts for older non-deleted instances in the group
 
         This method allows you to get a list of the hosts where instances in
-        this group are currently running.  Only instances which were created
-        before the specified instance are considered.
-
+        this group are currently running.  Two categories of instances are
+        considered: instances which were created before the specified instance
+        (based on db id), and instances with a more recent id, but are further
+        ahead in their task state transition.
         """
         filter_uuids = self.members
         filters = {'uuid': filter_uuids, 'deleted': False}
@@ -567,10 +568,11 @@ class InstanceGroup(base.NovaPersistentObject, base.NovaObject,
         instance_id = next(i.id for i in instances
                                 if i.uuid == instance_uuid)
 
-        # Unique hosts for instances that were created earlier than
-        # instance_uuid
         return list(set([i.host for i in instances
-                         if i.host and i.id < instance_id]))
+                                if i.host and (i.id < instance_id or
+                                (i.id > instance_id and
+                                 not (i.vm_state == vm_states.BUILDING
+                                      and i.task_state is None)))]))
 
     # WRS:extension
     @base.remotable
diff --git a/nova/tests/unit/objects/test_instance_group.py b/nova/tests/unit/objects/test_instance_group.py
index 2e1a5f6..aaf721a 100644
--- a/nova/tests/unit/objects/test_instance_group.py
+++ b/nova/tests/unit/objects/test_instance_group.py
@@ -24,6 +24,8 @@ import copy
 import mock
 from oslo_utils import timeutils
 
+from nova.compute import task_states
+from nova.compute import vm_states
 from nova import exception
 from nova import objects
 from nova.tests.unit.objects import test_objects
@@ -279,9 +281,12 @@ class _TestInstanceGroupObject(object):
     @mock.patch.object(objects.InstanceList, 'get_by_filters')
     def test_get_older_member_hosts(self, mock_get_by_filt):
         mock_get_by_filt.return_value = [
-            objects.Instance(id=1, uuid='uuid1', host='host1'),
-            objects.Instance(id=2, uuid='uuid2', host='host2'),
-            objects.Instance(id=3, uuid='uuid3', host='host2')]
+            objects.Instance(id=1, uuid='uuid1', host='host1',
+                             vm_state=vm_states.BUILDING, task_state=None),
+            objects.Instance(id=2, uuid='uuid2', host='host2',
+                             vm_state=vm_states.BUILDING, task_state=None),
+            objects.Instance(id=3, uuid='uuid3', host='host2',
+                             vm_state=vm_states.BUILDING, task_state=None)]
 
         obj = objects.InstanceGroup(mock.sentinel.ctx,
                                     members=['uuid1', 'uuid2', 'uuid3'])
@@ -299,9 +304,12 @@ class _TestInstanceGroupObject(object):
     @mock.patch.object(objects.InstanceList, 'get_by_filters')
     def test_get_older_member_hosts_with_some_none(self, mock_get_by_filt):
         mock_get_by_filt.return_value = [
-            objects.Instance(id=1, uuid='uuid1', host=None),
-            objects.Instance(id=2, uuid='uuid2', host='host2'),
-            objects.Instance(id=3, uuid='uuid3', host='host3')]
+            objects.Instance(id=1, uuid='uuid1', host=None,
+                             vm_state=vm_states.BUILDING, task_state=None),
+            objects.Instance(id=2, uuid='uuid2', host='host2',
+                             vm_state=vm_states.BUILDING, task_state=None),
+            objects.Instance(id=3, uuid='uuid3', host='host3',
+                             vm_state=vm_states.BUILDING, task_state=None)]
 
         obj = objects.InstanceGroup(mock.sentinel.ctx,
                                     members=['uuid1', 'uuid2', 'uuid3'])
@@ -314,6 +322,34 @@ class _TestInstanceGroupObject(object):
         self.assertEqual(1, len(hosts))
         self.assertIn('host2', hosts)
 
+    @mock.patch.object(objects.InstanceList, 'get_by_filters')
+    def test_get_older_member_hosts_inverted_id(self, mock_get_by_filt):
+        mock_get_by_filt.return_value = [
+            objects.Instance(id=1, uuid='uuid1', host='host1',
+                             vm_state=vm_states.BUILDING, task_state=None),
+            objects.Instance(id=2, uuid='uuid2', host='host2',
+                             vm_state=vm_states.BUILDING, task_state=None),
+            # setting task_state to spawning will force execution
+            # of code that adds host for more recent id=3,
+            objects.Instance(id=3, uuid='uuid3', host='host2',
+                             vm_state=vm_states.BUILDING,
+                             task_state=task_states.SPAWNING)]
+
+        obj = objects.InstanceGroup(mock.sentinel.ctx,
+                                    members=['uuid1', 'uuid2', 'uuid3'])
+
+        hosts = obj.get_older_member_hosts('uuid1')
+        self.assertEqual(1, len(hosts))
+        self.assertIn('host2', hosts)
+        hosts = obj.get_older_member_hosts('uuid2')
+        self.assertEqual(2, len(hosts))
+        self.assertIn('host1', hosts)
+        self.assertIn('host2', hosts)
+        hosts = obj.get_older_member_hosts('uuid3')
+        self.assertEqual(2, len(hosts))
+        self.assertIn('host1', hosts)
+        self.assertIn('host2', hosts)
+
 
 class TestInstanceGroupObject(test_objects._LocalTest,
                               _TestInstanceGroupObject):
-- 
2.7.4

